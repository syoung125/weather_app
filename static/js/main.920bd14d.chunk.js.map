{"version":3,"sources":["components/Weather.js","routes/Home.js","routes/MainHome.js","App.js","serviceWorker.js","index.js"],"names":["Weather","timestamp","temp","label","clouds","wind","humidity","icon","className","UNIX_timestamp","a","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","timeConverter","parseInt","src","alt","Home","state","isLoading","wList","cityId","props","match","params","id","cityName","CountryName","getWeather","axios","get","list","data","setState","findCityById","this","i","length","city","name","country","map","weather","key","dt","main","all","speed","React","Component","MainHome","isDataLoading","getCity","selectCountry","bind","countryArr","dataLen","$","inArray","push","sort","select","document","getElementById","text","option","createElement","add","onChange","selectCity","selectedCountry","value","makeCityList","cityArr","b","selectedCity","innerHTML","selectedOptions","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.920bd14d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './weather.css';\r\n\r\nfunction timeConverter(UNIX_timestamp){\r\n    var a = new Date(UNIX_timestamp * 1000);\r\n    // var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    var year = a.getFullYear();\r\n    // var month = months[a.getMonth()];\r\n    var month = a.getMonth() + 1;\r\n    var date = a.getDate();\r\n    var hour = a.getHours();\r\n    var min = a.getMinutes();\r\n    var sec = a.getSeconds();\r\n    var time = year + '/' + month + '/' + date + ' ' + hour + ':' + min + ':' + sec ;\r\n    return time;\r\n}\r\n\r\n/*\r\n@prop timestamp dt:Time of data calculation unix, UTC\r\n@prop temp temperature\r\n...\r\n*/\r\nfunction Weather({timestamp, temp, label, clouds, wind, humidity, icon}){\r\n    return (\r\n        <div className=\"weatherWrapper\">\r\n            <div className=\"weather\">\r\n                <h3 className=\"weather__timestamp\">{timeConverter(parseInt(timestamp))}</h3>\r\n                <div className=\"weather__img\">\r\n                    <img src={\"http://openweathermap.org/img/wn/\"+icon+\"@2x.png\"} alt={label}></img>\r\n                </div>\r\n                <h2 className=\"weather__temp\">{parseInt(temp) - 273} °C</h2>\r\n                <h3 className=\"weather__label\">{label}</h3>\r\n                <p className=\"weather__clouds\">clouds : {clouds} %</p>\r\n                <p className=\"weather__wind\">wind : {wind}  m/s</p>\r\n                <p className=\"weather__humidity\">humidity : {humidity} %</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nWeather.propTypes = {\r\n    timestamp: PropTypes.number.isRequired,\r\n    temp: PropTypes.number.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    clouds: PropTypes.number.isRequired,\r\n    wind: PropTypes.number.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    icon: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Weather from '../components/Weather'\r\nimport data from '../json/city.list.json';\r\nimport './Home.css';\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    wList: [],\r\n    cityId: this.props.match.params.id,\r\n    cityName: null,\r\n    CountryName: null\r\n  };\r\n  \r\n  getWeather = async() => {\r\n    // weather of given id\r\n    const {data: {list}} = await axios.get(\"http://api.openweathermap.org/data/2.5/forecast?id=\"+this.state.cityId+\"&APPID=902ca10063feb0211f04abbebbebcf8d\");\r\n    this.setState({wList: list, isLoading: false});\r\n    this.findCityById();\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getWeather();\r\n  }\r\n\r\n  findCityById(){\r\n    for(var i=0;i<data.length;i++){\r\n      var city = data[i];\r\n      if(city.id == this.state.cityId){\r\n        this.setState({cityName: city.name, CountryName: city.country});\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const { isLoading, wList } = this.state;\r\n    return (<section className=\"container\">\r\n      {isLoading? (\r\n        <div className=\"loader\">\r\n          <span className=\"loader_txt\">Loading...</span>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <div className=\"weathers__header\">\r\n            <h1>Weather of {this.state.cityName}, {this.state.CountryName}</h1>\r\n          </div>\r\n          <div className=\"weathers__body\">\r\n            {wList.map(weather => (\r\n              <Weather \r\n                key = {weather.dt}\r\n                timestamp = {weather.dt}\r\n                temp = {weather.main.temp}\r\n                label = {weather.weather[0].main}\r\n                clouds = {weather.clouds.all}\r\n                wind = {weather.wind.speed}\r\n                humidity = {weather.main.humidity}\r\n                icon = {weather.weather[0].icon}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </section>);\r\n  }\r\n  \r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport data from '../json/city.list.json';\r\nimport $ from 'jquery';\r\nimport \"./MainHome.css\";\r\n\r\nclass MainHome extends React.Component{\r\n    \r\n    constructor(){\r\n        super(); // this is required\r\n        this.state = {\r\n            isDataLoading: true,\r\n            country: []\r\n        }\r\n        this.getCity();\r\n        this.selectCountry = this.selectCountry.bind(this);\r\n    }\r\n\r\n    getCity() {\r\n        if(this.state.isDataLoading == true){   //because constructor was called multiple times \r\n            var countryArr = [];\r\n            var dataLen = data.length;\r\n            data.map((city, i) => {\r\n                if($.inArray(city.country, countryArr) == -1) countryArr.push(city.country);\r\n                if(dataLen == i+1) this.state.isDataLoading = false;\r\n            });\r\n            this.state.country = countryArr.sort();    // constructor 안에 있을 때는 state를 직접적으로 바꾼다.\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { country } = this.state;\r\n        var select = document.getElementById(\"country\");\r\n        country.map(text => {\r\n            var option = document.createElement(\"option\");\r\n            option.text = text;\r\n            select.add(option);\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"main__wrapper\">\r\n                <h1 className=\"title\">Where are you?</h1>\r\n                <div className=\"select__wrapper\">\r\n                    <label>Choose country: </label>\r\n                    <select id=\"country\" onChange={this.selectCountry}>\r\n                    </select>\r\n                </div>\r\n                <div className=\"select__wrapper\">\r\n                    <label>Choose city: </label>\r\n                    <select id=\"city\" onChange={this.selectCity}>\r\n                    </select>\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n                <p id=\"citytxt\"></p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    selectCountry(){\r\n        var selectedCountry = document.getElementById(\"country\").value;\r\n        this.makeCityList(selectedCountry);\r\n    }\r\n\r\n    makeCityList(selectedCountry){\r\n        var cityArr = [];\r\n        data.map((city) => {\r\n            if(city.country == selectedCountry){\r\n                cityArr.push(city);\r\n            }\r\n        });\r\n        cityArr.sort(function (a, b) {\r\n            if (a.name < b.name) {\r\n                return -1;\r\n            }\r\n            if (b.name < a.name) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n        var select = document.getElementById(\"city\");\r\n        cityArr.map((city) => {\r\n            var option = document.createElement(\"option\");\r\n            option.value = city.id;\r\n            option.text = city.name;\r\n            select.add(option);\r\n        })\r\n    }\r\n\r\n    selectCity(){\r\n        var selectedCity = document.getElementById(\"city\");   // 도시 코드 (id)\r\n        document.getElementById(\"citytxt\").innerHTML = \"<a href=\"+`/#/weather/${selectedCity.value}`+\">Click! The weather of \"\r\n                                                                +selectedCity.selectedOptions[0].text + \"</a>\";\r\n    }\r\n}\r\n\r\nexport default MainHome;","import React from 'react';\r\nimport {HashRouter, Route} from 'react-router-dom';\r\nimport Home from \"./routes/Home\";\r\nimport MainHome from \"./routes/MainHome\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <Route path=\"/\" exact={true} component={MainHome}></Route>\r\n      <Route path=\"/weather/:id\" component={Home}></Route>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}